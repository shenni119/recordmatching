import pandas as pd
import glob, os
import numpy as np
import xlrd
import string

#FILE NAMES, INPUT=FILES GENERATED OUTSIDE OF THIS SCRIPT, OUTPUT=FILES GENERATED BY THIS SCRIPT.
input_sqlserver_permits='past365permits724b.csv'
input_sqlserver_licenses='past365licenses724b.csv'
output_permit_license_combined='output_permit_license_combined724.csv'

input_customer_email_phone_file='Active_Customers_with_phone_or_email.xls'
output_customer_aging_combined_noemailphone='output_customer_aging_combined_noemailphone.csv'
output_customer_aging_combined_withemailphone='output_customer_aging_combined_withemailphone2.csv'

#TWO TASKS BELOW, MERGING/CLEANING EXCEL FILES AND MERGING/CLEANING SQL CSV

#1) MERGING EXCEL FILES
aging_files=glob.glob("Aging_**xls") #THE COMMAND BELOW IS GRAB OF ALL THE AGING REPORTS. REQUIRES 1) THAT BETH BURTON CONTINUES EXPORTING ALL THE AGING REPORTS IN XLS FORMAT AND FOR THERE
#TO BE NO OTHER XLS FILES IN THE WORKING DIRECTORY THAT STARTS WITH AGING_.

aging_filesdf= pd.DataFrame()

for excelfile in aging_files:
    df = pd.ExcelFile(excelfile)
    df = df.parse(skiprows=1)
    aging_filesdf = aging_filesdf.append(df,ignore_index=True)

aging_filesdf["Over30days"] = aging_filesdf["31-60 Days"].fillna(0).astype(int).map(int) + aging_filesdf["61-90 Days"].fillna(0).astype(int)+ aging_filesdf["Over 91 Days"].fillna(0).astype(int)
aging_filesdf["Over60days"] = aging_filesdf["61-90 Days"].fillna(0).astype(int)+ aging_filesdf["Over 91 Days"].fillna(0).astype(int)

aging_filesdf = aging_filesdf[aging_filesdf.Over60days > 0]

aging_filesdf['Customer ID']=aging_filesdf['Customer']

aging_filesdf.to_csv(output_customer_aging_combined_noemailphone, header=True, index=False, encoding='utf-8')

def horizontaljoin(csvfile_1,excelfile_2_output,shared_field_forcombining):
    pd_dataset1 = pd.read_csv(csvfile_1)
    pd_datasetcombined = pd.ExcelFile(excelfile_2_output)
    pd_datasetcombined=pd_datasetcombined.parse()
    merged = pd_datasetcombined.merge(pd_dataset1, on=shared_field_forcombining, how='right')
    #merged.to_csv(outcsv_name, header=True, index=False, encoding='utf-8')
    return (merged)

ar_with_phone_email=horizontaljoin(output_customer_aging_combined_noemailphone,input_customer_email_phone_file,'Customer ID')


#FINAL CLEANING
ar_with_phone_email['Phone']= ar_with_phone_email['Phone'].astype(str)
ar_with_phone_email.Phone = [x.strip().replace(' ', '') for x in ar_with_phone_email.Phone]
def remove_punctuation(s):
    s = ''.join([i for i in s if i not in frozenset(string.punctuation)])
    return s

ar_with_phone_email['DAYPHN'] = ar_with_phone_email['Phone'].apply(remove_punctuation)
ar_with_phone_email['Name'] = ar_with_phone_email['Name'].astype(str).str.lower().apply(remove_punctuation)
ar_with_phone_email['Email ID'] = ar_with_phone_email['Email ID'].astype(str).str.lower()
ar_with_phone_email['Address 1'] = ar_with_phone_email['Address 1'].astype(str).str.lower().apply(remove_punctuation)
ar_with_phone_email['Address_aging'] = ar_with_phone_email['Address 1']

ar_with_phone_email.rename(columns={'Email ID': 'EMAIL', 'Address 1': 'ADDR1','Name':'NAMELAST'}, inplace=True)
ar_with_phone_email['MOBILE']=ar_with_phone_email['DAYPHN']
ar_with_phone_email['FULLNAME']=ar_with_phone_email['Contact Name']
ar_with_phone_email['ADDR2']=ar_with_phone_email['NAMELAST']
ar_with_phone_email['EVEPHN']=ar_with_phone_email['DAYPHN']


#EXPORT
ar_with_phone_email.to_csv(output_customer_aging_combined_withemailphone, header=True, index=False, encoding='utf-8')

###1) MERGING SQL CSV
#########################################
sql_header=["APKEY","APNO","BUDGCODE","DESCRIPT","FEEDESC","ADDDTTM","DAYPHN","EVEPHN","FORGN","MOBILE","ADDR1","EMAIL","ADDR2","CONTACTTYPE","ZIP","IDKEY (CNTCTID)","NAMEFIRST","NAMELAST","FULLNAME","NAMEMID","STTAXID","DOB","FEDTAXID","IDNO","IDTYPE","COMMENTS (CNTCTID)","DRIVERLICENSENO","DRIVERLICENSESTATE","MAIDENNAME","REQUESTEDNAME"]

permit_df = pd.read_csv(input_sqlserver_permits, names = sql_header)
# permit_df = pd.read_csv(input_sqlserver_permits)
license_df=pd.read_csv(input_sqlserver_licenses, names = sql_header)

#CLEANING
# license_df.rename(columns={'LICENSENO': 'APNO'}, inplace=True)
license_permit_combined_frames = [permit_df, license_df]
license_permit_combined_df = pd.concat(license_permit_combined_frames)
print(license_permit_combined_df.head(10))
#
license_permit_combined_df['DAYPHN'] = pd.to_numeric(license_permit_combined_df['DAYPHN'], errors='coerce')
license_permit_combined_df['DAYPHN']= license_permit_combined_df['DAYPHN'].astype(str)

license_permit_combined_df['MOBILE'] = pd.to_numeric(license_permit_combined_df['MOBILE'], errors='coerce')
license_permit_combined_df['MOBILE']= license_permit_combined_df['MOBILE'].astype(str)

#EXPORT
license_permit_combined_df.to_csv(output_permit_license_combined, header=True, index=False, encoding='utf-8')
#########################################

# print(license_permit_combined_df.head(100))

#print(license_permit_combined_df.head(-10))
